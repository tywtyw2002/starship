name: Release
on:
  workflow_dispatch:
    override_tag:
      description: 'Override auto generate tag.'
      required: false
      type: string

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10
  MACOSX_DEPLOYMENT_TARGET: 10.7

jobs:
  release_it:
    name: Release It
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release_info.outputs.TAG_NAME }}
    steps:
      - name: Create Release Info
        id: release_info
        run:  |
          echo "TAG_NAME=$(date +'c%Y%m%d')" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=$(date +'%Y.%m.build-%d')" >> $GITHUB_OUTPUT

      - uses: ncipollo/release-action@v1
        id: release
        with:
          tag: ${{ steps.release_info.outputs.TAG_NAME }}
          name: ${{ steps.release_info.outputs.RELEASE_NAME }}
          draft: true

  # # Build sources for every OS
  # github_build:
  #   name: Build release binaries
  #   needs: release_please
  #   if: ${{ needs.release_please.outputs.release_created == 'true' }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - target: x86_64-unknown-linux-gnu
  #           os: ubuntu-latest
  #           name: starship-x86_64-unknown-linux-gnu.tar.gz

  #         # - target: x86_64-unknown-linux-musl
  #         #   os: ubuntu-latest
  #         #   name: starship-x86_64-unknown-linux-musl.tar.gz

  #         - target: x86_64-apple-darwin
  #           os: macOS-11
  #           name: starship-x86_64-apple-darwin.tar.gz

  #         # - target: aarch64-apple-darwin
  #         #   os: macOS-11
  #         #   name: starship-aarch64-apple-darwin.tar.gz

  #   runs-on: ${{ matrix.os }}
  #   continue-on-error: true
  #   env:
  #     RUSTFLAGS: ${{ matrix.rustflags || '' }}
  #   steps:
  #     - name: Setup | Checkout
  #       uses: actions/checkout@v3

  #     - name: Setup | Rust
  #       uses: actions-rs/toolchain@v1.0.7
  #       with:
  #         toolchain: stable
  #         override: true
  #         profile: minimal
  #         target: ${{ matrix.target }}

  #     - name: Build | Build
  #       uses: actions-rs/cargo@v1.0.3
  #       with:
  #         command: build
  #         args: --release --locked --target ${{ matrix.target }}
  #         use-cross: ${{ matrix.os == 'ubuntu-latest' }}

  #     - name: Post Build | Prepare artifacts [-nix]
  #       if: matrix.os != 'windows-latest'
  #       run: |
  #         cd target/${{ matrix.target }}/release
  #         tar czvf ../../../${{ matrix.name }} starship
  #         cd -

  #     - name: Release | Upload artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ matrix.name }}
  #         path: ${{ matrix.name }}

  # # Create GitHub release with Rust build targets and release notes
  # upload_artifacts:
  #   name: Add Build Artifacts to Release
  #   needs: [release_please, github_build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup | Artifacts
  #       uses: actions/download-artifact@v3

  #     - name: Setup | Checksums
  #       run: for file in starship-*/starship-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done

  #     - name: Setup | Publish Release
  #       run: gh release edit ${{ needs.release_please.outputs.tag_name }} --draft=false --repo=starship/starship
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build | Add Artifacts to Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         files: starship-*/starship-*
  #         tag_name: ${{ needs.release_please.outputs.tag_name }}
